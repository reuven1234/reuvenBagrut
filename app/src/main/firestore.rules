rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is accessing their own data
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to check if user is a participant in a chat
    function isChatParticipant() {
      return isAuthenticated() && 
        request.auth.uid in resource.data.participants;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
      
      // User's liked recipes subcollection
      match /liked_recipes/{recipeId} {
        allow read, write: if isOwner(userId);
      }
      
      // User's following subcollection
      match /following/{followingId} {
        allow read: if isAuthenticated();
        allow write: if isOwner(userId);
      }
      
      // User's followers subcollection
      match /followers/{followerId} {
        allow read: if isAuthenticated();
        allow write: if isOwner(userId);
      }
    }

    // Recipes collection
    match /recipes/{recipeId} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
      
      // Recipe comments subcollection
      match /comments/{commentId} {
        allow read: if isAuthenticated();
        allow create: if isAuthenticated();
        allow update, delete: if isAuthenticated() && 
          request.auth.uid == resource.data.userId;
      }
    }

    // Chats collection
    match /chats/{chatId} {
      allow read: if isAuthenticated() && 
        (request.auth.uid in resource.data.participants || 
         request.auth.uid in request.query.filters.participants);
      allow create: if isAuthenticated() && 
        request.auth.uid in request.resource.data.participants;
      allow update: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      allow delete: if isAuthenticated() && 
        request.auth.uid in resource.data.participants;
      
      // Chat messages subcollection
      match /messages/{messageId} {
        allow read: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        allow create: if isAuthenticated() && 
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;
        allow update, delete: if isAuthenticated() && 
          request.auth.uid == resource.data.senderId;
      }
    }
  }
} 